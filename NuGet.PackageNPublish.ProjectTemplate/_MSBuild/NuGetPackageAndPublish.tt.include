<#@ assembly name="System.Core" 
#><#@ assembly name="System.Xml" 
#><#@ assembly name="System.Xml.Linq" 
#><#@ import namespace="System.Collections.Generic" 
#><#@ import namespace="System.Xml" 
#><#@ import namespace="System.Xml.Linq" 
#><#@ import namespace="System.Text.RegularExpressions" 
#><#@ import namespace="System.IO" 
#><#@ import namespace="System.Collections" 
#><#@ import namespace="System.Linq" 
#><#@ import namespace="System.Text" 
#><#+
    /// <summary>
    /// Encapsulates information from various sources about the project being built.
    /// </summary>
    public class ProjectProperties
    {
        /// <summary>
        /// Builds information about the project
        /// </summary>
        /// <param name="hostDirectory">a directory to act as the root for file searches</param>
        public ProjectProperties(string hostDirectory)
        {
            // find the first (and only?) project file in the host directory to get a meaningful name if required
            var projectFileName = Directory.EnumerateFiles(hostDirectory, "*.csproj").FirstOrDefault();

            if (projectFileName != null)
            {
                Name = Path.GetFileNameWithoutExtension(projectFileName);
            }
            else
            {
                Name = "unknown";
            }
        }

        public string Name { get; private set; }
    }
	
	/// <summary>
    /// Encapsulates information about the assembly for the current project.
    /// </summary>
    public class AssemblyProperties
    {
        public AssemblyProperties(string rawAssemblyInfo)
        {
            Title = ReadInfo("AssemblyTitle", rawAssemblyInfo);
            Description = ReadInfo("AssemblyDescription", rawAssemblyInfo);
            Version = ReadInfo("AssemblyVersion", rawAssemblyInfo);
            FileVersion = ReadInfo("AssemblyFileVersion", rawAssemblyInfo);
            InformationalVersion = ReadInfo("AssemblyInformationalVersion", rawAssemblyInfo);
        }

        public string Title { get; private set; }

        public string Description { get; private set; }

        public string Version { get; private set; }

        public string FileVersion { get; private set; }

        public string InformationalVersion { get; private set; }

        private string ReadInfo(string tag, string rawAssemblyInfo)
        {
            var matcher = new Regex("(" + tag + "\\(\")(.*)(\"\\))");
            var value = matcher.Match(rawAssemblyInfo).Groups[2].ToString();

            return value;
        }
    }

    /// <summary>
    /// Encapsulates information about the package to be built for the current project
    /// </summary>
    public class PackageProperties
    {
        private const string DefaultPackageVersion = "1.0.0.0";

        private readonly string hostDirectory;

        private readonly IEnumerable<string> moduleNames;

        public PackageProperties(
            string hostDirectory,
            IEnumerable<string> moduleNames,
            string id,
            string title,
            string description,
            IEnumerable<string> versions)
        {
            this.hostDirectory = hostDirectory;
            this.moduleNames = moduleNames;

            Id = id;
            Title = title;
            Description = description;
            Version = BuildPackageVersion(versions);
            Dependencies = BuildDependencies();
        }

        public string Id { get; private set; }

        public string Title { get; private set; }

        public string Description { get; private set; }

        public string Version { get; private set; }

        public IEnumerable<XElement> Dependencies { get; private set; }

        /// <summary>
        /// Uses an algorithm for determining the 'best fit' version to use.
        /// It assumes the version numbers are in *.*.*.* format as per Assembly Info versions.
        /// If a number cannot be determined set the version to the default.
        /// </summary>
        /// <param name="versions">the versions to consider when determining the 'best fit'</param>
        /// <returns></returns>
        private string BuildPackageVersion(IEnumerable<string> versions)
        {
            // Convert the four digits of each version field into a number 
            // and map the resulting number to the string representing the version
            var versionNumbers = new Dictionary<long, string>();

            foreach (var version in versions)
            {
                versionNumbers[ConvertToLong(version)] = version;
            }

            // Use the version info that has the 'highest' number
            var packageVersion = versionNumbers[versionNumbers.Keys.Max()];

            // Use the default if the version could not be determined
            if (string.IsNullOrEmpty(packageVersion))
            {
                packageVersion = DefaultPackageVersion;
            }

            return packageVersion;
        }

        /// <summary>
        /// Determines a numeric value for a version info item in the assembly
        /// </summary>
        /// <param name="version">The assembly version item under consideration</param>
        /// <returns></returns>
        private long ConvertToLong(string version)
        {
            // Split the version info into individual parts e.g. 1.5.0.1
            var parts = version.Split('.');

            // Establish the ordinal multiplier by starting at a thousand
            long ordinal = 1000;
            long result = 0;

            // If the version number ends with a dash the increase the ordinal mulitplier to millions.
            // This will force any 'prerelease' version number to take priority.
            if (parts.Length >= 4 && version.Contains('-') && !version.EndsWith("-"))
            {
                ordinal += 1000;
            }

            // Multiply each number by the ordinal multiplier of the number - thousands, hundreds, tens, units
            foreach (var number in version.Trim('-').Split('.'))
            {
                long l;
                long.TryParse(number, out l);

                result += l * ordinal;
                ordinal /= 10;
            }

            return result;
        }

        private IEnumerable<XElement> BuildDependencies()
        {
            var packagesDoc = XDocument.Load(hostDirectory + "\\packages.config");

            IEnumerable<XElement> packages = new List<XElement>();

            if (!moduleNames.Any())
            {
                packages = GetModulePackages(packagesDoc);
            }

            foreach (var moduleName in moduleNames)
            {
                var modulePackagesPath = Path.Combine(Directory.GetParent(hostDirectory).ToString(), moduleName);

                var packagesConfigFileName = modulePackagesPath + "\\packages.config";

                if (File.Exists(packagesConfigFileName))
                {
                    packagesDoc = XDocument.Load(packagesConfigFileName);

                    var modulePackages = GetModulePackages(packagesDoc);

                    packages =
                        packages.Union(
                            modulePackages.Where(
                                p => !packages.Any(c => c.Attribute("id").Value == p.Attribute("id").Value)))
                            .OrderBy(p => p.Attribute("id").Value)
                            .ToList();
                }
            }

            return packages;
        }

        private static IEnumerable<XElement> GetModulePackages(XDocument packagesDoc)
        {
            return
                packagesDoc.Descendants("package")
                    .Where(
                        p =>
                        !p.Attribute("id").Value.StartsWith("NuGet.") && p.Attribute("developmentDependency") == null)
                    .ToList();
        }
    }

    /// <summary>
    /// Encapsulates information from various sources about the project being built.
    /// </summary>
    public class NuGetPackageAndPublish
    {
        private readonly string hostDirectory;

        private readonly IEnumerable<string> moduleNames;

        /// <summary>
        /// Builds a project, assembly and package instance
        /// </summary>
        /// <param name="hostDirectory">a directory to act as the root for file searches</param>
        /// <param name="moduleNames">a list of modules that will be included in a package</param>
        public NuGetPackageAndPublish(string hostDirectory, IEnumerable<string> moduleNames)
        {
            this.hostDirectory = hostDirectory;
            this.moduleNames = moduleNames;

            BuildProjectProperties();
            BuildAssemblyProperties();
            BuildPackageProperties();
        }

        public NuGetPackageAndPublish(string hostDirectory)
            : this(hostDirectory, new string[0])
        {
        }

        public ProjectProperties Project { get; private set; }

        public AssemblyProperties Assembly { get; private set; }

        public PackageProperties Package { get; private set; }

        /// <summary>
        /// Builds a ProjectProperties instance from a C# project file
        /// </summary>
        private void BuildProjectProperties()
        {
            Project = new ProjectProperties(hostDirectory);
        }

        /// <summary>
        /// Builds an AssemblyProperties instance from all C# files found 
        /// in the 'properties' directory of the current project
        /// </summary>
        private void BuildAssemblyProperties()
        {
            // Read and concatenate all info from C# files in the 'properties' directory
            var rawAssemblyInfo = new StringBuilder();

            foreach (var assemblyInfoFileName in
                Directory.EnumerateFiles(hostDirectory + "\\Properties", "*.cs", SearchOption.TopDirectoryOnly))
            {
                rawAssemblyInfo.Append(File.ReadAllText(assemblyInfoFileName));
            }

            // default the title when not provided
            if (!rawAssemblyInfo.ToString().Contains("AssemblyTitle"))
            {
                rawAssemblyInfo.Append("AssemblyTitle");
                rawAssemblyInfo.Append("(\"" + Project.Name + "\")");
            }

            // default the description when not provided
            if (!rawAssemblyInfo.ToString().Contains("AssemblyDescription"))
            {
                rawAssemblyInfo.Append("AssemblyDescription");
                rawAssemblyInfo.Append("(\"" + Project.Name + "\")");
            }

            Assembly = new AssemblyProperties(rawAssemblyInfo.ToString());
        }

        /// <summary>
        /// Builds a PackageProperties instance based on information in the AssemblyProperties instance.
        /// A package version is determined from a number of versions in the AssemblyProperties.
        /// </summary>
        private void BuildPackageProperties()
        {
            // trim off any default naming for package items
            var packageId = Project.Name.Replace(".NuGetPackage", string.Empty);
            
            var packageTitle = Assembly.Title.Replace(".NuGetPackage", string.Empty);
            var packageDescription = Assembly.Description;

            // provide any available versions for package versioning
            var versionsToConsider = new List<string>
                                         {
                                             Assembly.Version,
                                             Assembly.FileVersion,
                                             Assembly.InformationalVersion
                                         };

            Package = new PackageProperties(
                hostDirectory,
                moduleNames,
                packageId,
                packageTitle,
                packageDescription,
                versionsToConsider);
        }
    }
#>